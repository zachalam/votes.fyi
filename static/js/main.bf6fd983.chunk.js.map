{"version":3,"sources":["services/aragon.js","components/Loader.js","components/Login.js","components/Rankings.js","App.js","serviceWorker.js","index.js","assets/logo/votes.fyi.png"],"names":["theOrganization","a","connect","org","app","votingApp","allCasts","voting","Voting","address","votes","vote","casts","cast","voteRecord","voter","supportVotes","supports","totalVotes","bundle","allVotes","console","log","aragonVote","Loader","props","state","visibile","setInterval","setState","visible","animationIn","isVisible","this","animationInDuration","src","Logo","style","width","orgName","React","Component","Rankings","leaderboard","Object","entries","key","push","Table","Row","Cell","substring","length","basic","celled","collapsing","Body","Label","ribbon","App","Leaderboard","votingDetails","window","location","setTimeout","toRender","className","Grid","textAlign","height","verticalAlign","Column","maxWidth","paddingTop","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bf6fd983.chunk.js","sourcesContent":["import { connect } from \"@aragon/connect\";\nimport { Voting } from \"@aragon/connect-thegraph-voting\";\n\nasync function aragonVote(theOrganization) {\n  // establish an aragon org..\n  const org = await connect(theOrganization, \"thegraph\");\n\n  // fetch the voting app that belonging to this organization\n  const votingApp = await org.app(\"voting\");\n\n  // gather useful vote information for this app.\n  let allCasts = {};\n  let allVotes = {};\n\n  // create voting app based on address.\n  const voting = new Voting(\n    votingApp.address,\n    \"https://api.thegraph.com/subgraphs/name/aragon/aragon-voting-mainnet\"\n  );\n\n  // grab all votes from the app\n  const votes = await voting.votes();\n\n  for (const vote of votes) {\n    // each vote (or poll) cast in this org.\n    /* \n        appAddress: \"0x277bfcf7c2e162cb1ac3e9ae228a3132a75f83d4\"\n        creator: \"0xe53c8566e831b127c603c968158c59091a5e380e\"\n        executed: false\n        id: \"appAddress:0x277bfcf7c2e162cb1ac3e9ae228a3132a75f83d4-voteId:0x27\"\n        metadata: \"Do you approve AGP-143: Fundraising Maintenance? (Link: https://raw.githubusercontent.com/aragon/AGPs/bf5a8eb0a3436072bcb5b2fa818c94cd507e2121/AGPs/AGP-143.md) (SHA256: 69d7e593d6324358b40e2aa61dfef636f4c04a11d8afaae012e79a1ae4161e0f)\"\n        minAcceptQuorum: \"0\"\n        nay: \"2900000000000000000000\"\n        orgAddress: \"0x2de83b50af29678774d5abc4a7cb2a588762f28c\"\n        script: \"0x00000001\"\n        snapshotBlock: \"9089520\"\n        startDate: \"1576080045\"\n        supportRequiredPct: \"500000000000000000\"\n        votingPower: \"39609523809523809540000000\"\n        yea: \"910656589901319474703579\"\n    */\n    const casts = await vote.casts();\n    for (const cast of casts) {\n      // each cast made towards a vote in this org..\n      /* \n        id: \"appAddress:0x277bfcf7c2e162cb1ac3e9ae228a3132a75f83d4-voteId:0x18-castNum:0.0\"\n        supports: true\n        voteId: \"appAddress:0x277bfcf7c2e162cb1ac3e9ae228a3132a75f83d4-voteId:0x18\"\n        voter: \"0xb8506be2c700641873108a1a47d8e509157cf23\n        */\n       let voteRecord = {}\n       if(allCasts[cast.voter]) {\n           // already keeping track of this voter\n           let voter = allCasts[cast.voter];\n           voteRecord = {\n            supportVotes: (cast.supports ? 1 : 0) + voter.supportVotes, \n            totalVotes: 1 + voter.totalVotes\n            }\n       } else {\n           // first time seeing this voter.\n           voteRecord = {\n               supportVotes: cast.supports ? 1 : 0, \n               totalVotes: 1\n           }\n       }\n\n       allCasts[cast.voter] = voteRecord;\n    }\n  }\n  \n  const bundle = { allVotes: votes, allCasts };\n  console.log(\"bundle is\");\n  console.log(bundle);\n  return bundle;\n}\n\nexport default aragonVote;\n","import React from \"react\";\nimport Logo from \"../assets/logo/votes.fyi.png\";\nimport { Animated } from \"react-animated-css\";\n\nclass Loader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibile: true,\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => { this.setState({ visible: false }) }, 1012);\n    setInterval(() => { this.setState({ visible: true }) }, 1024);\n\n  }\n\n  render() {\n    let toRender = (\n      <>\n        <Animated\n          animationIn=\"pulse\"\n          isVisible={this.state.visible}\n          animationInDuration={1000}\n        >\n          <>\n            <img src={Logo} style={{ width: \"75%\" }} />\n          </>\n        </Animated>\n\n        <h1>Crunching DAO votes...</h1>\n        <h3><b>{this.props.orgName}</b></h3>\n      </>\n    );\n\n    return toRender;\n  }\n}\n\nexport default Loader;\n","import React from \"react\";\nimport Logo from \"../assets/logo/votes.fyi.png\";\nimport { Animated } from \"react-animated-css\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    let toRender = (\n      <>\n        <Animated\n          animationIn=\"pulse\"\n          isVisible={true}\n          animationInDuration={1000}\n        >\n          <>\n            <img src={Logo} style={{ width: \"75%\" }} />\n          </>\n        </Animated>\n\n        <h1>Enter Aragon DAO address:</h1>\n        <h3><b>{this.props.orgName}</b></h3>\n      </>\n    );\n\n    return toRender;\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Icon, Label, Menu, Table } from \"semantic-ui-react\";\n\nclass Rankings extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    let leaderboard = [];\n    for (const [key, cast] of Object.entries(this.props.allCasts)) {\n        leaderboard.push(            <Table.Row>\n            <Table.Cell>{key.substring(0, 6)}..{key.substring(38)}</Table.Cell>\n            <Table.Cell>{cast.length} votes</Table.Cell>\n          </Table.Row>);\n      }\n\n      \n    let toRender = (\n      <>\n        <Table basic='very' celled collapsing style={{width:'100%'}}>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>\n                <Label ribbon>First</Label>\n              </Table.Cell>\n              <Table.Cell></Table.Cell>\n            </Table.Row>\n            {leaderboard}\n          </Table.Body>\n        </Table>\n      </>\n    );\n\n    return toRender;\n  }\n}\n\nexport default Rankings;\n","import React from \"react\";\nimport { Grid} from 'semantic-ui-react'\n\nimport aragonVote from \"./services/aragon\";\nimport Loader from \"./components/Loader\";\nimport Login from \"./components/Login\";\nimport Rankings from \"./components/Rankings\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      votingDetails: {},\n      orgName: \"governance.aragonproject.eth\"\n    };\n  }\n  async componentDidMount() {\n    console.log(window.location);\n    setTimeout(() => {\n      window.location = \"/#looo\";\n    }, 3000);\n    const votingDetails = await aragonVote(this.state.orgName);\n    this.setState({ votingDetails });\n  }\n\n  Leaderboard = (casts) => {\n    console.log(\"casts is..\");\n    console.log(casts);\n\n    let leaderboard = [];\n    for (const [key, cast] of Object.entries(casts)) {\n      leaderboard.push(<div>{key}</div>);\n    }\n    return leaderboard;\n  };\n\n  render() {\n    const { votingDetails, orgName } = this.state;\n    const { allCasts } = votingDetails;\n\n    let toRender = (\n      <Loader orgName={orgName} />\n    );\n\n    \n    if (allCasts) {\n      toRender = (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Rankings allCasts={allCasts} />\n          </header>\n        </div>\n      );\n    }\n\n    // wrap in template\n    return <>\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 500, paddingTop:'1em' }}>\n      {toRender}\n      </Grid.Column>\n      </Grid>\n\n      </>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/votes.fyi.561ac2a9.png\";"],"sourceRoot":""}